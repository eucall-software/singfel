CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(SINGFELPROJECT)

SET(CMAKE_CPP_FLAGS "-g -Wall -DTHREADED -fopenmp")

IF(CMAKE_COMPILER_IS_GNUCXX)
  ADD_DEFINITIONS("-Wall")
ELSE()
  MESSAGE(FATAL_ERROR "CMakeLists.txt has not been tested/written for your compiler.")
ENDIF()

# Set output directory
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${SINGFELPROJECT_SOURCE_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${SINGFELPROJECT_SOURCE_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${SINGFELPROJECT_SOURCE_DIR}/bin)

SET(LIBSINGFEL ${SINGFELPROJECT_SOURCE_DIR}/libsingfel)
INCLUDE_DIRECTORIES(${LIBSINGFEL})
LINK_DIRECTORIES(${LIBSINGFEL})

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "DEBUG")
  #SET(CMAKE_BUILD_TYPE "RELEASE")
  #SET(CMAKE_BUILD_TYPE "RELWITHDEBINFO")
  #SET(CMAKE_BUILD_TYPE "MINSIZEREL")
ENDIF()

FIND_PACKAGE(HDF5 REQUIRED)
IF(HDF5_FOUND)
  MESSAGE("HDF5 FOUND!!!")
  set(HDF5_LIBRARIES "$ENV{HDF5_DIR}/lib/libhdf5.so" "$ENV{HDF5_DIR}/lib/libhdf5_cpp.so")
  MESSAGE("${HDF5_INCLUDE_DIRS} ${HDF5_LIBRARIES}")
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
  LINK_DIRECTORIES(${HDF5_LIBRARIES})
ELSE()
  MESSAGE("HDF5 IS NOT FOUND!!!!")
ENDIF()
############ HACK ############
#set(HDF5_INCLUDE_DIRS "$ENV{HDF5_DIR}/include")
#set(HDF5_LIBRARIES "$ENV{HDF5_DIR}/lib/libhdf5.so" "$ENV{HDF5_DIR}/lib/libhdf5_cpp.so")
#MESSAGE("CHUCK SAYS: ${HDF5_INCLUDE_DIRS}")
##############################
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

FIND_PACKAGE(GSL REQUIRED)

FIND_PACKAGE(Armadillo 3.9 REQUIRED)
IF(HAVE_ARMADILLO)
  INCLUDE(ARMA_FindMKL) # Look for MKL
  MESSAGE("CHUCK ARMA SAYS: ${ARMADILLO_INCLUDES}")
  #SET(ARMADILLO_LIBRARIES "ENV{ARMA_DIR}/libarmadillo.so")
  MESSAGE("CHUCK ARMA SAYS: ${ARMADILLO_LIBRARIES}")
  MESSAGE("CHUCK ARMA SAYS: ${ARMADILLO_INCLUDE_DIRS}")
  INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIRS} ${HDF5_INCLUDE_DIRS} ${ARMADILLO_INCLUDES})
  LINK_DIRECTORIES(${ARMADILLO_LIBRARIES} ${HDF5_LIBRARIES})
  MESSAGE(STATUS "MKL_FOUND     = ${MKL_FOUND}")
  IF(MKL_FOUND)
    MESSAGE("MKL_INCLUDE_DIRS = ${MKL_INCLUDE_DIRS}")
    INCLUDE_DIRECTORIES(${MKL_INCLUDE_DIRS})
    #set(BOOST_ROOT /usr/local/include)
    LINK_DIRECTORIES(${ARMADILLO_LIBRARIES} ${MKL_INCLUDE_DIRS})
    LINK_LIBRARIES(iomp5)
  ENDIF()
ELSEIF(NOT HAVE_ARMADILLO)
  MESSAGE("ARMA NOT FOUND. GOODBYE!!!")
ENDIF()

FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs)
SET(BOOST_ROOT $ENV{BOOST_DIR})
FIND_PACKAGE(Boost 1.55.0 REQUIRED COMPONENTS python thread date_time system mpi serialization filesystem unit_test_framework)
IF(Boost_FOUND)
  add_definitions(-DCOMPILE_WITH_BOOST) # set #define COMPILE_WITH_BOOST to 1 in .cpp
  MESSAGE("BOOST FOUND")
  MESSAGE("CHUCK SAYS: ${Boost_INCLUDE_DIRS} ${Boost_LIBRARY_DIRS} ${Boost_LIBRARIES} ${BOOST_ROOT}")

  SET(Boost_USE_STATIC_LIBS OFF)
  SET(Boost_USE_MULTITHREADED ON)
  SET(Boost_USE_STATIC_RUNTIME OFF)

  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
  LINK_LIBRARIES(${Boost_LIBRARIES} ${PYTHON_LIBRARIES} ${GSL_LIBRARIES}) # Deprecated but so convenient!

  #PYTHON_ADD_MODULE(hello hello.cpp)
  #FILE(COPY hello.py DESTINATION .)
  #ADD_TEST(01-HelloWorld hello.py)

  #PYTHON_ADD_MODULE(member member.cpp)
  #FILE(COPY member.py DESTINATION .)
  #ADD_TEST(04-HelloWorld member.py)

  ADD_LIBRARY(toolbox SHARED ../libsingfel/toolbox.cpp)
  TARGET_LINK_LIBRARIES(toolbox ${Boost_LIBRARIES})
  #FILE(COPY toolbox.py DESTINATION .)
  #ADD_TEST(toolbox2 toolbox.py)

ELSEIF(NOT Boost_FOUND)
  MESSAGE("Unable to find correct Boost version. Did you set BOOST_ROOT?")
ENDIF()
###### FIND BOOST WORKS, BUT LET'S USE LOCAL INSTALL ######
set(Boost_INCLUDE_DIRS "$ENV{BOOST_DIR}/include")
FILE(GLOB myBoostLibs "$ENV{BOOST_DIR}/lib/libboost*.so")
set(Boost_LIBRARIES ${myBoostLibs})
#MESSAGE("CHUCKIE BOOST SAYS: ${Boost_INCLUDE_DIRS} ${Boost_LIBRARY_DIRS} ${Boost_LIBRARIES}")
#INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})

# MPICH
find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})
MESSAGE("CHUCK MPI SAYS: ${MPI_INCLUDE_PATH} ${MPI_LIBRARY_DIRS} ${MPI_LIBRARIES}")

#SET(CMAKE_CXX_FLAGS "-std=c++0x -g -Wall") # Add c++11 features
SET(CMAKE_CXX_FLAGS "-g -Wall")

IF(CMAKE_COMPILER_IS_GNUCXX)
  ADD_DEFINITIONS("-Wall")
ELSE()
  MESSAGE(FATAL_ERROR "CMakeLists.txt has not been tested/written for your compiler.")
ENDIF()

message("${CMAKE_SOURCE_DIR}")
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake/cuda" ${CMAKE_MODULE_PATH})

MESSAGE("${CMAKE_MODULE_PATH}")

#add_definitions(-DCOMPILE_WITH_CXX11) # set #define COMPILE_WITH_CXX11 to 1 in .cpp

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(libsingfel)
